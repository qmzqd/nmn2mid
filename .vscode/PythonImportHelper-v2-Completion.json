[
    {
        "label": "mido",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mido",
        "description": "mido",
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "MidiFile",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "MidiTrack",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "MetaMessage",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "colorchooser",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "parse_input",
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "isExtraImport": true,
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "create_midi",
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "isExtraImport": true,
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_global_metadata",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_global_metadata(line, line_num, global_defaults, warnings):\n    \"\"\"解析全局元数据行（支持行内注释）\"\"\"\n    key_part = line[1:].split('#')[0].strip()\n    key, value = key_part.split('=', 1)\n    key = key.lower().replace('global_', '')\n    try:\n        if key == 'tempo':\n            global_defaults['tempo'] = mido.bpm2tempo(int(value))\n        elif key == 'time_signature':\n            numerator, denominator = map(int, value.split('/'))",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_track_metadata",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_track_metadata(line, line_num, current_track, warnings):\n    \"\"\"解析轨道元数据行（支持行内注释）\"\"\"\n    key_part = line[1:].split('#')[0].strip()\n    key, value = key_part.split('=', 1)\n    key = key.lower()\n    try:\n        if key == 'tempo':\n            warnings.append(f\"第{line_num}行: 轨道tempo参数已被弃用，请使用全局设置\")\n        elif key == 'time_signature':\n            warnings.append(f\"第{line_num}行: 轨道time_signature参数已被弃用，请使用全局设置\")",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_input",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_input(content):\n    \"\"\"解析输入内容并返回全局元数据、轨道列表和警告信息\"\"\"\n    global_defaults = {\n        'tempo': DEFAULT_TEMPO,\n        'time_signature': DEFAULT_TIME_SIGNATURE,\n        'key': DEFAULT_KEY,\n        'key_root': DEFAULT_KEY[0],\n        'key_mode': DEFAULT_KEY[1],\n        'instrument': DEFAULT_INSTRUMENT,\n        'ticks_per_beat': DEFAULT_TICKS_PER_BEAT",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_note",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_note(note_str, key_root, key_mode):\n    \"\"\"解析单个音符字符串（支持升降号、八度移位和复杂时值）\"\"\"\n    if note_str.startswith('0'):\n        match = re.fullmatch(r'0([.-]*)', note_str)\n        if not match:\n            raise ValueError(f\"无效休止符格式: {note_str}\")\n        duration_mod = match.group(1)\n        dashes = duration_mod.count('-')\n        dots = duration_mod.count('.')\n        duration = 1.0",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "create_track_events",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def create_track_events(track_data, ticks_per_beat):\n    \"\"\"生成轨道事件列表（优化时序计算）\"\"\"\n    events = []\n    current_time = 0\n    key_root = track_data['metadata']['key_root']\n    key_mode = track_data['metadata']['key_mode']\n    errors = []\n    for note_str in track_data['notes']:\n        try:\n            pitch, duration = parse_note(note_str, key_root, key_mode)",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "create_midi",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def create_midi(global_meta, tracks, output_path):\n    \"\"\"生成多轨MIDI文件（增强元数据支持）\"\"\"\n    mid = MidiFile(ticks_per_beat=global_meta['ticks_per_beat'])\n    # 创建全局控制轨道\n    global_track = MidiTrack()\n    mid.tracks.append(global_track)\n    global_track.append(MetaMessage('set_tempo', \n                                  tempo=global_meta['tempo'], \n                                  time=0))\n    global_track.append(MetaMessage('time_signature',",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "main_cli",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def main_cli():\n    \"\"\"命令行入口（改进帮助信息）\"\"\"\n    parser = argparse.ArgumentParser(\n        description='简谱转MIDI命令行版 v1.0',\n        formatter_class=argparse.RawTextHelpFormatter,\n        epilog='示例：\\n'\n               '  python nmn2midi_core.py input.txt -o output.mid\\n\\n'\n               '支持特性：\\n'\n               '- 全调号支持（包括大调和小调，如C、Am、F#maj等）\\n'\n               '- 行内注释（使用#符号）\\n'",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "KEY_ROOT_TO_BASE",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "KEY_ROOT_TO_BASE = {\n    'C': 60, 'C#': 61, 'Db': 61, 'D': 62, 'D#': 63, 'Eb': 63,\n    'E': 64, 'F': 65, 'F#': 66, 'Gb': 66, 'G': 67, 'G#': 68,\n    'Ab': 68, 'A': 69, 'A#': 70, 'Bb': 70, 'B': 71\n}\nSCALE_PATTERNS = {\n    'major': [0, 2, 4, 5, 7, 9, 11],    # 大调音阶\n    'minor': [0, 2, 3, 5, 7, 8, 10]     # 自然小调音阶\n}\nDEFAULT_TICKS_PER_BEAT = 480",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "SCALE_PATTERNS",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "SCALE_PATTERNS = {\n    'major': [0, 2, 4, 5, 7, 9, 11],    # 大调音阶\n    'minor': [0, 2, 3, 5, 7, 8, 10]     # 自然小调音阶\n}\nDEFAULT_TICKS_PER_BEAT = 480\nDEFAULT_INSTRUMENT = 0\nDEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_global_metadata(line, line_num, global_defaults, warnings):",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TICKS_PER_BEAT",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_TICKS_PER_BEAT = 480\nDEFAULT_INSTRUMENT = 0\nDEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_global_metadata(line, line_num, global_defaults, warnings):\n    \"\"\"解析全局元数据行（支持行内注释）\"\"\"\n    key_part = line[1:].split('#')[0].strip()\n    key, value = key_part.split('=', 1)\n    key = key.lower().replace('global_', '')",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_INSTRUMENT",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_INSTRUMENT = 0\nDEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_global_metadata(line, line_num, global_defaults, warnings):\n    \"\"\"解析全局元数据行（支持行内注释）\"\"\"\n    key_part = line[1:].split('#')[0].strip()\n    key, value = key_part.split('=', 1)\n    key = key.lower().replace('global_', '')\n    try:",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TEMPO",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_global_metadata(line, line_num, global_defaults, warnings):\n    \"\"\"解析全局元数据行（支持行内注释）\"\"\"\n    key_part = line[1:].split('#')[0].strip()\n    key, value = key_part.split('=', 1)\n    key = key.lower().replace('global_', '')\n    try:\n        if key == 'tempo':",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TIME_SIGNATURE",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_global_metadata(line, line_num, global_defaults, warnings):\n    \"\"\"解析全局元数据行（支持行内注释）\"\"\"\n    key_part = line[1:].split('#')[0].strip()\n    key, value = key_part.split('=', 1)\n    key = key.lower().replace('global_', '')\n    try:\n        if key == 'tempo':\n            global_defaults['tempo'] = mido.bpm2tempo(int(value))",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_KEY",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_KEY = ('C', 'major')\ndef parse_global_metadata(line, line_num, global_defaults, warnings):\n    \"\"\"解析全局元数据行（支持行内注释）\"\"\"\n    key_part = line[1:].split('#')[0].strip()\n    key, value = key_part.split('=', 1)\n    key = key.lower().replace('global_', '')\n    try:\n        if key == 'tempo':\n            global_defaults['tempo'] = mido.bpm2tempo(int(value))\n        elif key == 'time_signature':",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "EnhancedText",
        "kind": 6,
        "importPath": "nmn2mid_gui",
        "description": "nmn2mid_gui",
        "peekOfCode": "class EnhancedText(tk.Text):\n    \"\"\"带行号对齐优化的文本编辑器\"\"\"\n    def __init__(self, *args, **kwargs):\n        kwargs.update({\n            'wrap': tk.NONE,\n            'font': ('Consolas', 12),\n            'undo': True,\n            'padx': 15,\n            'pady': 15,\n            'bg': \"white\",",
        "detail": "nmn2mid_gui",
        "documentation": {}
    },
    {
        "label": "SyntaxHighlighter",
        "kind": 6,
        "importPath": "nmn2mid_gui",
        "description": "nmn2mid_gui",
        "peekOfCode": "class SyntaxHighlighter:\n    \"\"\"改进的语法高亮系统\"\"\"\n    def __init__(self, text_widget, highlight_color):\n        self.text = text_widget\n        self.highlight_color = highlight_color\n        self.update_tags()\n    def update_tags(self):\n        self.text.tag_configure('meta', foreground=self.highlight_color)\n        self.text.tag_configure('track', foreground='#28a745')\n        self.text.tag_configure('comment', foreground='#6c757d')",
        "detail": "nmn2mid_gui",
        "documentation": {}
    },
    {
        "label": "NMNConverterApp",
        "kind": 6,
        "importPath": "nmn2mid_gui",
        "description": "nmn2mid_gui",
        "peekOfCode": "class NMNConverterApp:\n    def __init__(self, root):\n        self.root = root\n        root.title(\"NMN2MIDI Converter v1.0\")\n        root.geometry(\"1200x800\")\n        self.default_output_dir = os.path.join(os.getcwd(), \"outputs\")\n        self.current_file = None\n        self.highlight_color = \"#007BFF\"\n        self.highlighter = None\n        self.settings_window = None",
        "detail": "nmn2mid_gui",
        "documentation": {}
    }
]