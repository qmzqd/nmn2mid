[
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "mido",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mido",
        "description": "mido",
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "MidiFile",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "MidiTrack",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "MetaMessage",
        "importPath": "mido",
        "description": "mido",
        "isExtraImport": true,
        "detail": "mido",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Fraction",
        "importPath": "fractions",
        "description": "fractions",
        "isExtraImport": true,
        "detail": "fractions",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "colorchooser",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "parse_input",
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "isExtraImport": true,
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "create_midi",
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "isExtraImport": true,
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_key",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_key(value: str) -> Tuple[str, str]:\n    \"\"\"统一解析调号格式（支持大小写和多种模式写法）\"\"\"\n    match = re.match(\n        r'^([A-Ga-g](?:#|b)?)\\s*((?:m|min|minor|maj|major)?)$',\n        value.strip(),\n        re.IGNORECASE\n    )\n    if not match:\n        raise ValueError(f\"无效调号格式: {value}\")\n    root = match.group(1).upper()",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_global_metadata",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_global_metadata(line: str, line_num: int, \n                        global_defaults: Dict, warnings: List[str]) -> None:\n    \"\"\"解析全局元数据行（增强错误处理）\"\"\"\n    try:\n        # 分离注释并去除空白\n        key_part = line[1:].split('#', 1)[0].strip()\n        if '=' not in key_part:\n            raise ValueError(\"缺少等号分隔符\")\n        key, value = map(str.strip, key_part.split('=', 1))\n        key = key.lower().replace('global_', '')",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_track_metadata",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_track_metadata(line: str, line_num: int,\n                       current_track: Dict, warnings: List[str]) -> None:\n    \"\"\"解析轨道元数据（复用调号解析逻辑）\"\"\"\n    try:\n        key_part = line[1:].split('#', 1)[0].strip()\n        if '=' not in key_part:\n            raise ValueError(\"缺少等号分隔符\")\n        key, value = map(str.strip, key_part.split('=', 1))\n        key = key.lower()\n        if key == 'tempo':",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_input",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_input(content: str) -> Tuple[Dict, List[Dict], List[str]]:\n    \"\"\"解析输入内容（增加行号追踪）\"\"\"\n    global_defaults = {\n        'tempo': DEFAULT_TEMPO,\n        'time_signature': DEFAULT_TIME_SIGNATURE,\n        'key': DEFAULT_KEY,\n        'key_root': DEFAULT_KEY[0],\n        'key_mode': DEFAULT_KEY[1],\n        'instrument': DEFAULT_INSTRUMENT,\n        'ticks_per_beat': DEFAULT_TICKS_PER_BEAT",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "parse_note",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def parse_note(note_str: str, key_root: str, key_mode: str) -> Tuple[Optional[int], Fraction]:\n    \"\"\"解析音符（增强格式验证）\"\"\"\n    if note_str.startswith('0'):\n        match = re.fullmatch(r'0([.-]*)', note_str)\n        if not match:\n            raise ValueError(f\"无效休止符格式: {note_str}\")\n        mods = match.group(1)\n        return None, _calculate_duration(mods)\n    match = re.fullmatch(r'^([#b]?)([1-7])([_^]*)([.-]*)$', note_str)\n    if not match:",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "create_track_events",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def create_track_events(track_data: Dict, ticks_per_beat: int) -> List[Tuple]:\n    \"\"\"生成轨道事件（带错误上下文）\"\"\"\n    events = []\n    current_time = 0\n    key_root = track_data['metadata']['key_root']\n    key_mode = track_data['metadata']['key_mode']\n    errors = []\n    for note_str in track_data['notes']:\n        try:\n            pitch, duration = parse_note(note_str, key_root, key_mode)",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "create_midi",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def create_midi(global_meta: Dict, tracks: List[Dict], output_path: str) -> None:\n    \"\"\"生成MIDI文件（增强鲁棒性）\"\"\"\n    if not tracks:\n        raise ValueError(\"无有效轨道数据\")\n    try:\n        mid = MidiFile(ticks_per_beat=global_meta['ticks_per_beat'])\n        # 全局轨道\n        global_track = MidiTrack()\n        mid.tracks.append(global_track)\n        global_track.append(MetaMessage('set_tempo',",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "main_cli",
        "kind": 2,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "def main_cli():\n    \"\"\"命令行接口（增强错误处理）\"\"\"\n    parser = argparse.ArgumentParser(\n        description='简谱转MIDI转换器 v2.0',\n        formatter_class=argparse.RawTextHelpFormatter,\n        epilog=\"\"\"输入文件格式示例：\n@global_tempo = 120\n@global_time_signature = 4/4\n@global_key = C\n[track]",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "KEY_ROOT_TO_BASE",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "KEY_ROOT_TO_BASE = {\n    'C': 60, 'C#': 61, 'Db': 61, 'D': 62, 'D#': 63, 'Eb': 63,\n    'E': 64, 'F': 65, 'F#': 66, 'Gb': 66, 'G': 67, 'G#': 68,\n    'Ab': 68, 'A': 69, 'A#': 70, 'Bb': 70, 'B': 71\n}\nSCALE_PATTERNS = {\n    'major': [0, 2, 4, 5, 7, 9, 11],\n    'minor': [0, 2, 3, 5, 7, 8, 10]\n}\nDEFAULT_TICKS_PER_BEAT = 480",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "SCALE_PATTERNS",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "SCALE_PATTERNS = {\n    'major': [0, 2, 4, 5, 7, 9, 11],\n    'minor': [0, 2, 3, 5, 7, 8, 10]\n}\nDEFAULT_TICKS_PER_BEAT = 480\nDEFAULT_INSTRUMENT = 0\nDEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_key(value: str) -> Tuple[str, str]:",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TICKS_PER_BEAT",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_TICKS_PER_BEAT = 480\nDEFAULT_INSTRUMENT = 0\nDEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_key(value: str) -> Tuple[str, str]:\n    \"\"\"统一解析调号格式（支持大小写和多种模式写法）\"\"\"\n    match = re.match(\n        r'^([A-Ga-g](?:#|b)?)\\s*((?:m|min|minor|maj|major)?)$',\n        value.strip(),",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_INSTRUMENT",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_INSTRUMENT = 0\nDEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_key(value: str) -> Tuple[str, str]:\n    \"\"\"统一解析调号格式（支持大小写和多种模式写法）\"\"\"\n    match = re.match(\n        r'^([A-Ga-g](?:#|b)?)\\s*((?:m|min|minor|maj|major)?)$',\n        value.strip(),\n        re.IGNORECASE",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TEMPO",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_TEMPO = mido.bpm2tempo(120)\nDEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_key(value: str) -> Tuple[str, str]:\n    \"\"\"统一解析调号格式（支持大小写和多种模式写法）\"\"\"\n    match = re.match(\n        r'^([A-Ga-g](?:#|b)?)\\s*((?:m|min|minor|maj|major)?)$',\n        value.strip(),\n        re.IGNORECASE\n    )",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TIME_SIGNATURE",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_TIME_SIGNATURE = (4, 4)\nDEFAULT_KEY = ('C', 'major')\ndef parse_key(value: str) -> Tuple[str, str]:\n    \"\"\"统一解析调号格式（支持大小写和多种模式写法）\"\"\"\n    match = re.match(\n        r'^([A-Ga-g](?:#|b)?)\\s*((?:m|min|minor|maj|major)?)$',\n        value.strip(),\n        re.IGNORECASE\n    )\n    if not match:",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_KEY",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "DEFAULT_KEY = ('C', 'major')\ndef parse_key(value: str) -> Tuple[str, str]:\n    \"\"\"统一解析调号格式（支持大小写和多种模式写法）\"\"\"\n    match = re.match(\n        r'^([A-Ga-g](?:#|b)?)\\s*((?:m|min|minor|maj|major)?)$',\n        value.strip(),\n        re.IGNORECASE\n    )\n    if not match:\n        raise ValueError(f\"无效调号格式: {value}\")",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "@global_tempo",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "@global_tempo = 120\n@global_time_signature = 4/4\n@global_key = C\n[track]\n1 2 3 4 | 5 6 7 1^\n支持特性：\n• 多轨道支持\n• 复杂节奏型（附点、连音线）\n• 全调号支持（含大小调）\n• 行内注释（#符号）\"\"\"",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "@global_time_signature",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "@global_time_signature = 4/4\n@global_key = C\n[track]\n1 2 3 4 | 5 6 7 1^\n支持特性：\n• 多轨道支持\n• 复杂节奏型（附点、连音线）\n• 全调号支持（含大小调）\n• 行内注释（#符号）\"\"\"\n    )",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "@global_key",
        "kind": 5,
        "importPath": "nmn2mid_core",
        "description": "nmn2mid_core",
        "peekOfCode": "@global_key = C\n[track]\n1 2 3 4 | 5 6 7 1^\n支持特性：\n• 多轨道支持\n• 复杂节奏型（附点、连音线）\n• 全调号支持（含大小调）\n• 行内注释（#符号）\"\"\"\n    )\n    parser.add_argument('input', help='输入文本文件路径')",
        "detail": "nmn2mid_core",
        "documentation": {}
    },
    {
        "label": "EnhancedText",
        "kind": 6,
        "importPath": "nmn2mid_gui",
        "description": "nmn2mid_gui",
        "peekOfCode": "class EnhancedText(tk.Text):\n    \"\"\"带行号对齐优化的文本编辑器\"\"\"\n    def __init__(self, *args, **kwargs):\n        kwargs.update({\n            'wrap': tk.NONE,\n            'font': ('Consolas', 12),\n            'undo': True,\n            'padx': 15,\n            'pady': 15,\n            'bg': \"white\",",
        "detail": "nmn2mid_gui",
        "documentation": {}
    },
    {
        "label": "SyntaxHighlighter",
        "kind": 6,
        "importPath": "nmn2mid_gui",
        "description": "nmn2mid_gui",
        "peekOfCode": "class SyntaxHighlighter:\n    \"\"\"改进的语法高亮系统\"\"\"\n    def __init__(self, text_widget, highlight_color):\n        self.text = text_widget\n        self.highlight_color = highlight_color\n        self.update_tags()\n    def update_tags(self):\n        self.text.tag_configure('meta', foreground=self.highlight_color)\n        self.text.tag_configure('track', foreground='#28a745')\n        self.text.tag_configure('comment', foreground='#6c757d')",
        "detail": "nmn2mid_gui",
        "documentation": {}
    },
    {
        "label": "NMNConverterApp",
        "kind": 6,
        "importPath": "nmn2mid_gui",
        "description": "nmn2mid_gui",
        "peekOfCode": "class NMNConverterApp:\n    def __init__(self, root):\n        self.root = root\n        root.title(\"NMN2MIDI Converter v1.0\")\n        root.geometry(\"1200x800\")\n        self.default_output_dir = os.path.join(os.getcwd(), \"outputs\")\n        self.current_file = None\n        self.highlight_color = \"#007BFF\"\n        self.highlighter = None\n        self.settings_window = None",
        "detail": "nmn2mid_gui",
        "documentation": {}
    }
]